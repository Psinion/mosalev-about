// <auto-generated />
using System;
using MOS.Data.EF.Access.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MOS.Data.EF.Access.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20241117072855_add-resume")]
    partial class addresume
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MOS.Domain.Entities.Index.IndexContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserCreateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserDeleteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserUpdateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserDeleteId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("IndexContents");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Commentary")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserCreateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserDeleteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserUpdateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserDeleteId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.Resume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PinnedToLocale")
                        .HasColumnType("integer");

                    b.Property<int>("Salary")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UserCreateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserDeleteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserUpdateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserDeleteId");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumeCompanyEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ResumeCompanyEntries");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumeCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResumeCourses");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumeEducation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResumeEducations");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumePost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ResumeCompanyEntryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ResumeCompanyEntryId");

                    b.ToTable("ResumePosts");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumeSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResumeSkills");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Index.IndexContent", b =>
                {
                    b.HasOne("MOS.Domain.Entities.Users.User", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId");

                    b.HasOne("MOS.Domain.Entities.Users.User", "UserDelete")
                        .WithMany()
                        .HasForeignKey("UserDeleteId");

                    b.HasOne("MOS.Domain.Entities.Users.User", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.Company", b =>
                {
                    b.HasOne("MOS.Domain.Entities.Users.User", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId");

                    b.HasOne("MOS.Domain.Entities.Users.User", "UserDelete")
                        .WithMany()
                        .HasForeignKey("UserDeleteId");

                    b.HasOne("MOS.Domain.Entities.Users.User", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.Resume", b =>
                {
                    b.HasOne("MOS.Domain.Entities.Users.User", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId");

                    b.HasOne("MOS.Domain.Entities.Users.User", "UserDelete")
                        .WithMany()
                        .HasForeignKey("UserDeleteId");

                    b.HasOne("MOS.Domain.Entities.Users.User", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumeCompanyEntry", b =>
                {
                    b.HasOne("MOS.Domain.Entities.Resume.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumePost", b =>
                {
                    b.HasOne("MOS.Domain.Entities.Resume.ResumeCompanyEntry", null)
                        .WithMany("ResumePosts")
                        .HasForeignKey("ResumeCompanyEntryId");
                });

            modelBuilder.Entity("MOS.Domain.Entities.Resume.ResumeCompanyEntry", b =>
                {
                    b.Navigation("ResumePosts");
                });
#pragma warning restore 612, 618
        }
    }
}
